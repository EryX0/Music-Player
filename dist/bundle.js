/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("\nconst songName = document.querySelector(\".song-name\");\nconst artistName = document.querySelector(\".artist-name\");\nconst coverImage = document.querySelector(\"img\");\nconst [backward, playPause, forward] = document.querySelectorAll(\"i\");\nconst timeline = document.querySelector(\".time-line\");\nconst filler = document.querySelector(\".filler\");\nconst audio = document.querySelector(\"audio\");\nconst time = document.querySelector(\".song-time\");\nconst currentTime = document.querySelector(\".current-time\");\nconst body = document.querySelector(\"body\");\nconst playerBox = document.querySelector(\".player-box\");\nconst content = document.querySelector(\".content\");\nlet songs = [\n    {\n        id: 0,\n        name: \"Believer\",\n        artist: \"Imagine Dragons\",\n        cover: \"../images/Imagine-Dragons-Believer-art.jpg\",\n        src: \"../songs/01 Believer.mp3\",\n        background: \"../videos/believergif.gif\",\n    },\n    {\n        id: 1,\n        name: \"Goodbyes\",\n        artist: \"Post Malone\",\n        cover: \"../images/Post_Malone_-_Hollywood's_Bleeding.png\",\n        src: \"../songs/2_5323735572550780476.mp3\",\n        background: \"../videos/goodbyesgif.gif\",\n    },\n    {\n        id: 2,\n        name: \"Paid My Dues\",\n        artist: \"NF\",\n        cover: \"../images/NF_Clouds_(The_Mixtape)_album_cover.png\",\n        src: \"../songs/10 PAID MY DUES.mp3\",\n        background: \"../videos/nfgif.gif\",\n    },\n    {\n        id: 3,\n        name: \"Blinding Lights\",\n        artist: \"The Weeknd\",\n        cover: \"../images/The_Weeknd_-_Blinding_Lights.png\",\n        src: \"../songs/The Weeknd - Blinding Lights.mp3\",\n        background: \"../videos/blindinglightgif.gif\",\n    },\n    {\n        id: 4,\n        name: \"GraveYard\",\n        artist: \"Halsey\",\n        cover: \"../images/Halsey_-_Graveyard.png\",\n        src: \"../songs/Halsey - Graveyard (2019) MELOVAZ.NET.mp3\",\n        background: \"../videos/graveyardgif.gif\",\n    },\n    {\n        id: 5,\n        name: \"What I've Done\",\n        artist: \"Linkin Park\",\n        cover: \"../images/Minutes_to_Midnight_cover.jpg\",\n        src: \"../songs/07 What I've Done.mp3\",\n        background: \"../videos/whativedonegif.gif\",\n    },\n];\nclass MusicPlayer {\n    static _playPauseHandler() {\n        if (playPause.classList.contains(\"fa-circle-play\")) {\n            this._playSong();\n        }\n        else {\n            this._pauseSong();\n        }\n    }\n    static _playSong() {\n        playPause.classList.remove(\"fa-circle-play\");\n        playPause.classList.add(\"fa-circle-pause\");\n        audio.play();\n        this._kornometer = window.setInterval(this._currentTimeHandler, 1000);\n    }\n    static _pauseSong() {\n        playPause.classList.remove(\"fa-circle-pause\");\n        playPause.classList.add(\"fa-circle-play\");\n        audio.pause();\n        clearInterval(this._kornometer);\n    }\n    static _setSongData() {\n        coverImage.setAttribute(\"src\", songs[this._songIndex].cover);\n        songName.innerText = songs[this._songIndex].name;\n        artistName.innerText = songs[this._songIndex].artist;\n        audio.setAttribute(\"src\", songs[this._songIndex].src);\n        const convertedTime = this._convertTime(audio.duration);\n        audio.addEventListener(\"loadeddata\", function () {\n            time.innerText = convertedTime;\n        });\n        currentTime.innerText = \"00:00\";\n        body.style.backgroundImage = `url(${songs[this._songIndex].background})`;\n        if (playPause.classList.contains(\"fa-circle-pause\")) {\n            this._playPauseHandler();\n        }\n        filler.style.left = \"-100%\";\n    }\n    static _nextMusic() {\n        this._songIndex++;\n        if (this._songIndex >= songs.length) {\n            this._songIndex = 0;\n        }\n        this._setSongData();\n    }\n    static _previousSong() {\n        this._songIndex--;\n        if (this._songIndex < 0) {\n            this._songIndex = songs.length - 1;\n        }\n        this._setSongData();\n    }\n    static _currentTimeHandler() {\n        currentTime.innerText = this._convertTime(audio.currentTime);\n        this._fillerHandler();\n        if (audio.duration === audio.currentTime) {\n            clearInterval(this._kornometer);\n        }\n    }\n    static _fillerHandler() {\n        const total = audio.currentTime;\n        const songTime = audio.duration;\n        const percent = 100 - (total / songTime) * 100;\n        filler.style.left = \"-\" + percent + \"%\";\n    }\n    static _convertTime(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        let second = Math.floor(seconds % 60);\n        if (second < 10) {\n            second = \"0\" + second;\n        }\n        return \"0\" + minutes + \":\" + second;\n    }\n    static _selectTime(event) {\n        const start = (document.body.clientWidth - 456) / 2 + (456 * 7.5) / 100;\n        const current = event.clientX - start;\n        const percent = 100 - (current / timeline.offsetWidth) * 100;\n        filler.style.left = \"-\" + percent + \"%\";\n        audio.currentTime = ((100 - percent) * audio.duration) / 100;\n        currentTime.innerHTML = this._convertTime(audio.currentTime);\n    }\n    static _hoverHandler() {\n        playerBox.style.backgroundColor = \"rgb(45, 118, 187)\";\n        playerBox.style.cursor = \"pointer\";\n        playerBox.style.boxShadow =\n            \"1px 1px 2px black, 0 0 5px rgb(13, 44, 5), 0 0 5px rgba(1, 139, 30, 0.614)\";\n    }\n    static _unHoverHandler() {\n        playerBox.style.backgroundColor = \"rgba(121, 240, 168,0)\";\n        playerBox.style.border = \"4px solid rgb(45, 118, 187)\";\n        playerBox.style.cursor = \"default\";\n        playerBox.style.boxShadow = \"\";\n    }\n    static _firstShowHandler() {\n        playerBox.style.backgroundColor = \"rgba(237, 255, 242,0)\";\n        playerBox.style.border = \"2px solid rgb(45, 118, 187)\";\n        playerBox.style.boxShadow = \"\";\n        playerBox.style.animation = \"first-show 3s\";\n        playerBox.removeEventListener(\"mouseover\", this._hoverHandler);\n        playerBox.removeEventListener(\"mouseout\", this._unHoverHandler);\n        playerBox.removeEventListener(\"click\", this._firstShowHandler);\n        playerBox.style.cursor = \"default\";\n        playerBox.style.width = \"456px\";\n        playerBox.style.height = \"80%\";\n        playerBox.style.transition = \"all 1s\";\n        content.style.animation = \"fade-in 2s\";\n        playerBox.style.boxShadow = \"\";\n    }\n    static _animationHandler() {\n        playerBox.style.border = \"none\";\n        playerBox.style.boxShadow = \"\";\n        body.style.backgroundImage = \"url('../videos/believergif.gif')\";\n        playerBox.style.backgroundColor = \"rgba(90, 133, 105, 0.178)\";\n        content.style.display = \"block\";\n        content.style.visibility = \"visible\";\n        content.style.opacity = \"1\";\n    }\n    static Run() {\n        playPause.addEventListener(\"click\", this._playPauseHandler);\n        forward.addEventListener(\"click\", this._nextMusic);\n        backward.addEventListener(\"click\", this._previousSong);\n        timeline.addEventListener(\"click\", this._selectTime);\n        playerBox.addEventListener(\"click\", this._firstShowHandler);\n        playerBox.addEventListener(\"mouseover\", this._hoverHandler);\n        playerBox.addEventListener(\"mouseout\", this._unHoverHandler);\n        playerBox.addEventListener(\"animationend\", this._animationHandler);\n    }\n}\nMusicPlayer._songIndex = 0;\nMusicPlayer.Run();\n\n\n//# sourceURL=webpack://music-player/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;